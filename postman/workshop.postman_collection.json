{
	"info": {
		"_postman_id": "a5946135-0317-4045-aba4-ba281a19db14",
		"name": "workshop",
		"description": "Workshop's Swagger specification",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17185211"
	},
	"item": [
		{
			"name": "bank account",
			"item": [
				{
					"name": "create bank account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('expect response be created', function () {",
									"    pm.expect(pm.response.code).to.eq(201)",
									"})",
									"pm.test('expect created id equals to 1', function () {",
									"     pm.expect(pm.response.json().id).to.eq(1)",
									"})",
									"pm.test('expect created balance equals to 999.0', function () {",
									"     pm.expect(pm.response.json().balance).to.eq(999.0)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "basic YWRtaW46c2VjcmV0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"balance\": 999.0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "create bank account bad request data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('expect response be bad request', function () {",
									"    pm.expect(pm.response.code).to.eq(400)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "basic YWRtaW46c2VjcmV0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "balan",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"accounts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pocket",
			"item": [
				{
					"name": "get all pockets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should response success(200) and object of latest expense\", function () {",
									"    var allPocket = pm.response.json();",
									"    var len = allPocket.length;",
									"    ",
									"    pm.expect(len).to.be.above(0, \"pocket should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pockets",
							"host": [
								"{{url}}"
							],
							"path": [
								"pockets"
							]
						}
					},
					"response": []
				},
				{
					"name": "get pocket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should response success(200) and object of latest expense\", function () {",
									"    var pocket = pm.response.json();",
									"    ",
									"    pm.expect(pocket.id.toString()).to.not.eq(\"\")",
									"    pm.expect(pocket.amount).to.not.eql(0, \"amount should not be zero\");",
									"    pm.expect(pocket.name.toString()).to.not.eq(\"\", \"name should not be empty\")",
									"    pm.expect(pocket.accountId.toString()).to.not.eq(\"\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pockets/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"pockets",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "get pocket not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('expect response be bad request', function () {",
									"    pm.expect(pm.response.code).to.eq(404)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pockets/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"pockets",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get feature flag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('expect response be 200', function () {",
							"    pm.response.to.be.ok",
							"})",
							"pm.test('expect feature flag to be false', function () {",
							"     pm.expect(pm.response.json().isLimitMaxBalanceOnCreate).to.be.false",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "basic YWRtaW46c2VjcmV0",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/features",
					"host": [
						"{{url}}"
					],
					"path": [
						"features"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "secret",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}